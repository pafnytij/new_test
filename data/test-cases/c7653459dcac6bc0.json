{"uid":"c7653459dcac6bc0","name":"Запрос transferbalance: проверка работы: перевод средств с одного аккаунта на один аккаунт, одна валюта.","fullName":"Antelope.test_transferbalance#test_transferbalance_1","historyId":"9e3a9af3de76fd450504ed69e4942af8","time":{"start":1604317767253,"stop":1604317777277,"duration":10024},"description":"\n    Описание шагов:\n        Setup: создаём аккаунты с логином 100,103.\n            - Пополняем баланс аккаунта 100\n        Тест:\n            Шаг1: запрос servertime - параметр from для getbalancesoperations\n            Шаг2: отправляем запрос transferbalance на перевод средств с 100 аккаунта на 103 100$\n            Шаг3: проверка ответа\n            Шаг4: запрос servertime - параметр to для getbalancesoperations\n            Шаг5: Запрос getbalancesoperations для from_logins - 100 аккаунта\n            Шаг6: проверяем данные - должно быть списано 100$\n            Шаг7: Запрос getbalancesoperations для receiver_logins - 103 аккаунта\n            Шаг8: проверяем данные\n        Tear down:\n            - Удаление аккаунта\n    ","descriptionHtml":"<pre><code>Описание шагов:\n    Setup: создаём аккаунты с логином 100,103.\n        - Пополняем баланс аккаунта 100\n    Тест:\n        Шаг1: запрос servertime - параметр from для getbalancesoperations\n        Шаг2: отправляем запрос transferbalance на перевод средств с 100 аккаунта на 103 100$\n        Шаг3: проверка ответа\n        Шаг4: запрос servertime - параметр to для getbalancesoperations\n        Шаг5: Запрос getbalancesoperations для from_logins - 100 аккаунта\n        Шаг6: проверяем данные - должно быть списано 100$\n        Шаг7: Запрос getbalancesoperations для receiver_logins - 103 аккаунта\n        Шаг8: проверяем данные\n    Tear down:\n        - Удаление аккаунта\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert ('1' == '1'\n    1 and '-100' == '100000'\n  - 100000\n  + -100)","statusTrace":"create_account = ()\n\n    @allure.title(\"Запрос transferbalance: проверка работы: перевод средств с одного аккаунта на один аккаунт, одна валюта.\")\n    @allure.severity('blocker')\n    @pytest.mark.smoke\n    def test_transferbalance_1(create_account):\n        \"\"\"\n        Описание шагов:\n            Setup: создаём аккаунты с логином 100,103.\n                - Пополняем баланс аккаунта 100\n            Тест:\n                Шаг1: запрос servertime - параметр from для getbalancesoperations\n                Шаг2: отправляем запрос transferbalance на перевод средств с 100 аккаунта на 103 100$\n                Шаг3: проверка ответа\n                Шаг4: запрос servertime - параметр to для getbalancesoperations\n                Шаг5: Запрос getbalancesoperations для from_logins - 100 аккаунта\n                Шаг6: проверяем данные - должно быть списано 100$\n                Шаг7: Запрос getbalancesoperations для receiver_logins - 103 аккаунта\n                Шаг8: проверяем данные\n            Tear down:\n                - Удаление аккаунта\n        \"\"\"\n        size_0 = {'login': '100', 'balance': '900', 'credit': '0', 'equity': '900', 'margin': '0', 'margin_free': '900',\n                  'success_flag': '1'}\n        size_1 = {'login': '103', 'balance': '100', 'credit': '0', 'equity': '100', 'margin': '0', 'margin_free': '100',\n                  'success_flag': '1'}\n    \n        with allure.step('Запрос servertime - параметр from для getbalancesoperations'):\n            servertime_from = wik5.request(wik_mt5_addr, 'servertime')\n            from_1 = int(servertime_from['time'])\n            time.sleep(5)\n        with allure.step('Запрос transferbalance'):\n            transferbalance = wik5.request(wik_mt5_addr, 'transferbalance', from_logins = 100, receiver_logins= 103, amount=100, from_comment = \"from_comment\", receiver_comment = \"receiver_comment\")\n            # Данные для отчёта: stdout\n            print(\"Ответ запроса transferbalance : \", transferbalance)\n            with allure.step('Проверка ответа'):\n                assert \"1\" == transferbalance[\"result\"] and size_0 == transferbalance[\"size\"][0] and size_1 == transferbalance[\"size\"][1]\n        with allure.step('Запрос servertime - параметр to для getbalancesoperations'):\n            time.sleep(5)\n            servertime_from = wik5.request(wik_mt5_addr, 'servertime')\n            to_1 = int(servertime_from['time'])\n        with allure.step('Запрос getbalancesoperations для from_logins - 100 аккаунта.'):\n            getbalancesoperations = wik5.request(wik_mt5_addr, 'getbalancesoperations', **{'login': 100, 'from':from_1, 'to':to_1})\n            with allure.step('Проверяем ответ'):\n>               assert '1' == getbalancesoperations['result'] and \"-100\" == getbalancesoperations['size'][0]['profit']\nE               AssertionError: assert ('1' == '1'\nE                   1 and '-100' == '100000'\nE                 - 100000\nE                 + -100)\n\nAntelope\\test_transferbalance.py:82: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"create_account","time":{"start":1604317762233,"stop":1604317767253,"duration":5020},"status":"passed","steps":[{"name":"Создаем группу с валютой EUR","time":{"start":1604317762233,"stop":1604317762233,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Создаем аккаунт","time":{"start":1604317762233,"stop":1604317767253,"duration":5020},"status":"passed","steps":[{"name":"Начисление баланса на аккаунт","time":{"start":1604317762245,"stop":1604317767253,"duration":5008},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"testStage":{"description":"\n    Описание шагов:\n        Setup: создаём аккаунты с логином 100,103.\n            - Пополняем баланс аккаунта 100\n        Тест:\n            Шаг1: запрос servertime - параметр from для getbalancesoperations\n            Шаг2: отправляем запрос transferbalance на перевод средств с 100 аккаунта на 103 100$\n            Шаг3: проверка ответа\n            Шаг4: запрос servertime - параметр to для getbalancesoperations\n            Шаг5: Запрос getbalancesoperations для from_logins - 100 аккаунта\n            Шаг6: проверяем данные - должно быть списано 100$\n            Шаг7: Запрос getbalancesoperations для receiver_logins - 103 аккаунта\n            Шаг8: проверяем данные\n        Tear down:\n            - Удаление аккаунта\n    ","status":"failed","statusMessage":"AssertionError: assert ('1' == '1'\n    1 and '-100' == '100000'\n  - 100000\n  + -100)","statusTrace":"create_account = ()\n\n    @allure.title(\"Запрос transferbalance: проверка работы: перевод средств с одного аккаунта на один аккаунт, одна валюта.\")\n    @allure.severity('blocker')\n    @pytest.mark.smoke\n    def test_transferbalance_1(create_account):\n        \"\"\"\n        Описание шагов:\n            Setup: создаём аккаунты с логином 100,103.\n                - Пополняем баланс аккаунта 100\n            Тест:\n                Шаг1: запрос servertime - параметр from для getbalancesoperations\n                Шаг2: отправляем запрос transferbalance на перевод средств с 100 аккаунта на 103 100$\n                Шаг3: проверка ответа\n                Шаг4: запрос servertime - параметр to для getbalancesoperations\n                Шаг5: Запрос getbalancesoperations для from_logins - 100 аккаунта\n                Шаг6: проверяем данные - должно быть списано 100$\n                Шаг7: Запрос getbalancesoperations для receiver_logins - 103 аккаунта\n                Шаг8: проверяем данные\n            Tear down:\n                - Удаление аккаунта\n        \"\"\"\n        size_0 = {'login': '100', 'balance': '900', 'credit': '0', 'equity': '900', 'margin': '0', 'margin_free': '900',\n                  'success_flag': '1'}\n        size_1 = {'login': '103', 'balance': '100', 'credit': '0', 'equity': '100', 'margin': '0', 'margin_free': '100',\n                  'success_flag': '1'}\n    \n        with allure.step('Запрос servertime - параметр from для getbalancesoperations'):\n            servertime_from = wik5.request(wik_mt5_addr, 'servertime')\n            from_1 = int(servertime_from['time'])\n            time.sleep(5)\n        with allure.step('Запрос transferbalance'):\n            transferbalance = wik5.request(wik_mt5_addr, 'transferbalance', from_logins = 100, receiver_logins= 103, amount=100, from_comment = \"from_comment\", receiver_comment = \"receiver_comment\")\n            # Данные для отчёта: stdout\n            print(\"Ответ запроса transferbalance : \", transferbalance)\n            with allure.step('Проверка ответа'):\n                assert \"1\" == transferbalance[\"result\"] and size_0 == transferbalance[\"size\"][0] and size_1 == transferbalance[\"size\"][1]\n        with allure.step('Запрос servertime - параметр to для getbalancesoperations'):\n            time.sleep(5)\n            servertime_from = wik5.request(wik_mt5_addr, 'servertime')\n            to_1 = int(servertime_from['time'])\n        with allure.step('Запрос getbalancesoperations для from_logins - 100 аккаунта.'):\n            getbalancesoperations = wik5.request(wik_mt5_addr, 'getbalancesoperations', **{'login': 100, 'from':from_1, 'to':to_1})\n            with allure.step('Проверяем ответ'):\n>               assert '1' == getbalancesoperations['result'] and \"-100\" == getbalancesoperations['size'][0]['profit']\nE               AssertionError: assert ('1' == '1'\nE                   1 and '-100' == '100000'\nE                 - 100000\nE                 + -100)\n\nAntelope\\test_transferbalance.py:82: AssertionError","steps":[{"name":"Запрос servertime - параметр from для getbalancesoperations","time":{"start":1604317767253,"stop":1604317772254,"duration":5001},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Запрос transferbalance","time":{"start":1604317772254,"stop":1604317772272,"duration":18},"status":"passed","steps":[{"name":"Проверка ответа","time":{"start":1604317772272,"stop":1604317772272,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Запрос servertime - параметр to для getbalancesoperations","time":{"start":1604317772272,"stop":1604317777274,"duration":5002},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Запрос getbalancesoperations для from_logins - 100 аккаунта.","time":{"start":1604317777274,"stop":1604317777276,"duration":2},"status":"failed","statusMessage":"AssertionError: assert ('1' == '1'\n    1 and '-100' == '100000'\n  - 100000\n  + -100)\n","statusTrace":"  File \"C:\\Users\\Pavel Starovoitov.TFBDEV\\PycharmProjects\\wikmt5_antelope\\Antelope\\test_transferbalance.py\", line 82, in test_transferbalance_1\n    assert '1' == getbalancesoperations['result'] and \"-100\" == getbalancesoperations['size'][0]['profit']\n","steps":[{"name":"Проверяем ответ","time":{"start":1604317777276,"stop":1604317777276,"duration":0},"status":"failed","statusMessage":"AssertionError: assert ('1' == '1'\n    1 and '-100' == '100000'\n  - 100000\n  + -100)\n","statusTrace":"  File \"C:\\Users\\Pavel Starovoitov.TFBDEV\\PycharmProjects\\wikmt5_antelope\\Antelope\\test_transferbalance.py\", line 82, in test_transferbalance_1\n    assert '1' == getbalancesoperations['result'] and \"-100\" == getbalancesoperations['size'][0]['profit']\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"ac73aa44041fce5","name":"stdout","source":"ac73aa44041fce5.txt","type":"text/plain","size":370}],"parameters":[],"stepsCount":6,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"create_account::0","time":{"start":1604317777297,"stop":1604317777304,"duration":7},"status":"passed","steps":[{"name":"Удаление созданных аккаунтов","time":{"start":1604317777297,"stop":1604317777304,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"labels":[{"name":"severity","value":"blocker"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"Antelope"},{"name":"suite","value":"test_transferbalance"},{"name":"host","value":"WKST-T-5"},{"name":"thread","value":"8604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Antelope.test_transferbalance"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[{"uid":"4df948c9614649df","status":"failed","statusDetails":"AssertionError: assert ('1' == '1'\n    1 and '-100' == '100000'\n  - 100000\n  + -100)","time":{"start":1604313530546,"stop":1604313540576,"duration":10030}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["smoke"]},"source":"c7653459dcac6bc0.json","parameterValues":[]}